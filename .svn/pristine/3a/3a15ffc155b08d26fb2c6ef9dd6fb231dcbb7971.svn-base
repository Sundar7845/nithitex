<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Cart;
use App\Models\Coupon;
use App\Models\Product;
use App\Models\State;
use App\Models\User;
use App\Models\Wishlist;
use App\Traits\Utils;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class CartController extends Controller
{
	use Utils;
	public function AddToCart(Request $request, $id)
	{
		if (Auth::check()) {

			$product = Product::findOrFail($id);
			$exists = Cart::where('user_id', Auth::user()->id)->where('product_id', $id)->first();
			if (!$exists) {
				$quantity = $request->quantity;

				$price = (Auth::user()->userrole_id == 1 ? $product->product_discount : $product->seller_discount);
				$cart_total = $price * $quantity;

				if ($product->current_stock < $quantity) {
					return response()->json(['error' => 'You cannot buy more than current stock ' . $product->current_stock . '']);
				}
				Cart::create([
					'product_id' => $id,
					'user_id' => Auth::user()->id,
					'name' => $product->product_name,
					'qty' => $quantity,
					'price' => $price,
					'total' => $cart_total,
					'image' => $product->product_image
				]);

				return response()->json(['success' => 'Product successfully added on your cart']);
			} else {

				return response()->json(['error' => 'This product was already added on your cart']);
			}
		} else {

			return response()->json(['error' => 'Please login to your account before adding to cart']);
		}
	} // end mehtod 
	public function simpleAddToCart(Request $request, $id)
	{
		if (Auth::check()) {

			$product = Product::findOrFail($id);
			$exists = Cart::where('user_id', Auth::user()->id)->where('product_id', $id)->first();
			if (!$exists) {
				$quantity = 1;
				$price = (Auth::user()->userrole_id == 1 ? $product->product_discount : $product->seller_discount);
				$cart_total = $price * $quantity;
				Cart::create([
					'product_id' => $id,
					'user_id' => Auth::user()->id,
					'name' => $product->product_name,
					'qty' => $quantity,
					'price' => $price,
					'total' => $cart_total,
					'image' => $product->product_image
				]);

				return response()->json(['success' => 'Successfully Added on Your Cart']);
			} else {

				return response()->json(['error' => 'This product was already added on your cart']);
			}
		} else {

			return response()->json(['error' => 'Please login to your account before adding to cart']);
		}
	} // end mehtod 


	public function AddMiniCart()
	{
		if (Auth::check()) {

			Cart::join('products', 'products.id', 'carts.product_id')
				->where('user_id', Auth::user()->id)
				->where('current_stock', '<=', 0)
				->select('carts.*', 'products.current_stock')
				->delete();

			$cartList = Cart::select('carts.*', 'products.current_stock')
				->join('products', 'products.id', 'carts.product_id')
				->where('user_id', Auth::user()->id)->get();
			foreach ($cartList as $item) {
				// dd($item->qty .'-'.$item->current_stock .'-'.$item->product_id);
				if ($item->qty > $item->current_stock) {
					Cart::where('user_id', Auth::user()->id)
						->where('product_id', $item->product_id)
						->update([
							'qty' => $item->current_stock
						]);
				}
			}
			$carts = Cart::join('products', 'products.id', 'carts.product_id')
				->where('user_id', Auth::user()->id)
				->where('current_stock', '>', 0)
				->select('carts.*', 'products.current_stock', 'products.product_image')
				->get();

			$cartTotal = Cart::join('products', 'products.id', 'carts.product_id')
				->where('user_id', Auth::user()->id)
				->where('current_stock', '>', 0)
				->select('carts.*', 'products.current_stock')
				->sum('total');

			$cartQty = Cart::join('products', 'products.id', 'carts.product_id')
				->where('user_id', Auth::user()->id)
				->where('current_stock', '>', 0)
				->select('carts.*', 'products.current_stock')
				->count('carts.id');

			return response()->json(array(
				'carts' => $carts,
				'cartQty' => $cartQty,
				'cartTotal' => $cartTotal,

			));
		} else {

			return response()->json(['error' => 'Please login to your account before adding to cart']);
		}
	} // end method 
	/// remove mini cart 
	public function RemoveMiniCart($rowId)
	{
		$Cart = Cart::findOrFail($rowId);
		$Cart->delete();
		return response()->json(['success' => 'Product successfully removed from your cart']);
	}
	public function AddToWishlist(Request $request, $product_id)
	{
		if (Auth::check()) {

			$exists = Wishlist::where('user_id', Auth::id())->where('product_id', $product_id)->first();
			if (!$exists) {
				Wishlist::insert([
					'user_id' => Auth::id(),
					'product_id' => $product_id,
					'is_favourite' => 1,
					'created_at' => Carbon::now(),
				]);

				$wishlistQty = Wishlist::where('user_id', Auth::user()->id)->count('id');
				return response()->json(['wishlistQty' => $wishlistQty, 'success' => 'Product successfully added on your wishlist']);
			} else {

				return response()->json(['error' => 'This product was already on your wishlist']);
			}
		} else {

			return response()->json(['error' => 'Please login to your account before adding to wishlist']);
		}
	} // end method
	// Checkout Method 
	public function CheckoutCreate()
	{
		$out_of_stock = $this->validateOutOfStock(1, Auth::user()->id, 0);
		// dd($out_of_stock);
		if ($out_of_stock) {
			$notification = array(
				'message' => 'Order not placed!. One of the product in your cart is out of stock. So please try again.',
				'alert-type' => 'error'
			);
			return Redirect()->route('mycart')->with($notification);
		}
		$state = State::orderBy('state_name', 'ASC')->get();
		if (Auth::user()->state_name) {
			$state_name = User::where('state_name', Auth::user()->state_name)->pluck('state_name')->first();
			$s_name = State::where('state_name', $state_name)->first();
			$shipping_charge = State::where('shipping_charge', $s_name->shipping_charge)->pluck('shipping_charge')->first();
			$cod_charge = State::where('cod_charge', $s_name->cod_charge)->pluck('cod_charge')->first();
		} else {
			$shipping_charge = 0;
			$cod_charge = 0;
		}

		if (Auth::check()) {
			$cartTotal = Cart::where('user_id', Auth::user()->id)->sum('total');
			if ($cartTotal > 0) {
				$carts = Cart::where('user_id', Auth::user()->id)->get();
				$cartQty = Cart::where('user_id', Auth::user()->id)->get()->count('id');
				$cart_true = 1;

				return view('frontend.checkout.checkout_view', compact('carts', 'cartQty', 'cartTotal', 'cart_true', 'state', 'shipping_charge', 'cod_charge'));
			} else {

				$notification = array(
					'message' => 'Please Add Atleast One Product',
					'alert-type' => 'error'
				);

				return redirect()->to('/')->with($notification);
			}
		} else {

			$notification = array(
				'message' => 'You Need To Login',
				'alert-type' => 'error'
			);

			return redirect()->route('login')->with($notification);
		}
	} // end method 

	public function couponCalculation(Request $request)
	{
		$coupon = $this->couponCalc($request->coupon_code, Auth::user()->userrole_id, Auth::user()->coupon_id);
		if ($coupon) {
			return response()->json(['discount_percentage' => $coupon->discount_percentage, 'coupon_id' => $coupon->id, 'success' => 'Coupon Applied!']);
		} else {
			return response()->json(['error' => 'Expired Or Invalid Coupon!']);
		}
	}
}
