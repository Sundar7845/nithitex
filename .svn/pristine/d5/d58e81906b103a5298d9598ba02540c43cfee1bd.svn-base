<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Category;
use App\Models\Product;
use App\Models\ProductMultipleImage;
use Illuminate\Http\Request;
use App\Traits\ResponseAPI;
use App\Traits\Utils;
use Exception;
use Illuminate\Support\Facades\DB;

class ProductController extends Controller
{
  use ResponseAPI;
  use Utils;
  private $productLimit = 20;

  public function productsByCategory(Request $request, $id)
  {
    try {
      $user_id = ($request->user_id > 0 ? array($request->user_id) : 0);
      $limit_type = ($request->limit_type > 0 ? $request->limit_type : 0);

      if ($limit_type == 0) {
        $query = $this->getProducts($user_id)
          ->where('category_id', $id)
          ->inRandomOrder()
          ->orderBy('id', 'DESC');
      } else {
        $query = $this->getProducts($user_id)
          ->where('category_id', $id)
          ->inRandomOrder()
          ->limit($this->productLimit)
          ->orderBy('id', 'DESC');
      }

      $products = $query->get();

      $responseData = $this->getProductLists($products, $user_id);

      return response()->json(['data' => $responseData], 200);
    } catch (Exception $e) {
      return $this->error($e->getMessage(), $e->getCode());
    }
  }

  public function allProducts(Request $request)
  {
    try {

      $user_id = ($request->user_id > 0 ? array($request->user_id) : 0);
      $limit_type = ($request->limit_type > 0 ? $request->limit_type : 0);

      if ($limit_type == 0) {
        $query = $this->getProducts($user_id)
          ->inRandomOrder()
          ->orderBy('id', 'DESC');
      } else {
        $query = $this->getProducts($user_id)
          ->inRandomOrder()
          ->limit($this->productLimit)
          ->orderBy('id', 'DESC');
      }

      if ($request->product_type == 0) {
        $products = $query->get();
      } else if ($request->product_type == 1) {
        if ($limit_type == 0) {
          $products = $this->getOfferProducts($user_id)
            ->inRandomOrder()
            ->orderBy('id', 'DESC')
            ->get();
        } else {
          $products = $this->getOfferProducts($user_id)
            ->inRandomOrder()
            ->limit($this->productLimit)
            ->orderBy('id', 'DESC')
            ->get();
        }
      } else if ($request->product_type == 2) {
        $products = $query->where('is_featured', '=', 1)->get();
      } else if ($request->product_type == 3) {
        $products = $query->where('is_bestSelling', '=', 1)->get();
      } else if ($request->product_type == 4) {
        $products = $query->where('is_newArrival', '=', 1)->get();
      }

      $responseData = $this->getProductLists($products, $user_id);

      return response()->json(['data' => $responseData], 200);
    } catch (\Exception $e) {
      return $this->error($e->getMessage(), $e->getCode());
    }
  }

  public function productdetail(Request $request, $id)
  {
    try {
      $responseData = [];

      $responseData['product'] = [];
      $user_id = array($request->user_id);
      if ($user_id) {
        $query = Product::select('wishlists.is_favourite', 'wishlists.user_id', 'products.*');
        $query->leftJoin('wishlists', function ($join) {
          $join->on('wishlists.product_id', '=', 'products.id')
            ->where("wishlists.user_id", '=', DB::raw('?'));
        })->setBindings(array_merge($query->getBindings(), $user_id));
        $product = $query->where('products.id', '=', $id)
          ->get();
      } else {
        $product = Product::where('products.id', '=', $id)->get();
      }
      foreach ($product as $item) {
        $productDetails['id'] = $item->id;

        $category = Category::where('id', $item->category_id)->pluck('category_name')->first();

        $amount = $item->product_price - $item->product_discount;
        $discount = ($amount / $item->product_price) * 100;

        $productDetails['category_id'] = $item->category_id;
        $productDetails['category_name'] = $category;
        $productDetails['product_name'] = $item->product_name;
        $productDetails['product_price'] = $item->product_price;
        $productDetails['product_discount'] = $item->product_discount;
        $productDetails['short_description'] = $item->short_description;
        $productDetails['long_description'] = $item->long_description;
        $productDetails['current_stock'] = $item->current_stock;
        $productDetails['product_sku'] = $item->product_sku;
        $productDetails['discount_percentage'] = round($discount);
        $productDetails['product_image'] = url($item->product_image);
        $productDetails['product_url'] = url('/product/details/' . $item->id . '/' . $item->product_slug);
        $productDetails['is_favourite'] = $item->is_favourite;
        $productDetails['color_id'] = $item->color_id;
        $productDetails['color_name'] = $item->color_name;
        $productDetails['color_code'] = $item->color_code;

        $multiImage = ProductMultipleImage::where('product_id', $item->id)->get();
        $multiImagedetails = [];
        $productDetails['product_multiple_image'] = [];

        foreach ($multiImage as $item) {
          $multiImagedetails['id'] = $item->id;
          $multiImagedetails['product_id'] = $item->product_id;
          $multiImagedetails['product_multiple_image'] = url($item->product_mult_image);
          array_push($productDetails['product_multiple_image'], $multiImagedetails);
        }
        array_push($responseData['product'], $productDetails);
      }

      return response()->json(['data' => $responseData], 200);
    } catch (\Exception $e) {
      return $this->error($e->getMessage(), $e->getCode());
    }
  }


  public function search(Request $request, $search_value)
  {

    $responseData = [];
    $user_id = array($request->user_id);
    if ($user_id) {
      $query = Product::select('wishlists.is_favourite', 'wishlists.user_id', 'products.*');
      $query->leftJoin('wishlists', function ($join) {
        $join->on('wishlists.product_id', '=', 'products.id')
          ->where("wishlists.user_id", '=', DB::raw('?'));
      })->setBindings(array_merge($query->getBindings(), $user_id));
      $results = $query->where('is_offers', '=', 0)
        ->where('current_stock', '>', 0)
        ->where('products.product_name', 'like', '%' . $search_value . '%')
        ->orWhere('product_sku', 'LIKE', '%' . $search_value . '%')
        ->get();
    } else {
      $results = Product::where('current_stock', '>', 0)
        ->where('is_offers', '=', 0)
        ->where('products.product_name', 'like', '%' . $search_value . '%')
        ->orWhere('product_sku', 'LIKE', '%' . $search_value . '%')
        ->get();
    }
    foreach ($results as $item) {
      $searchDetails['product_id'] = $item->id;
      $searchDetails['product_name'] = $item->product_name;
      $searchDetails['category_id'] = $item->category_id;
      $searchDetails['category_name'] = $item->category_name;
      $searchDetails['product_price'] = $item->product_price;
      $searchDetails['product_discount'] = $item->product_discount;
      $searchDetails['product_image'] = url($item->product_image);
      $searchDetails['is_favourite'] = $item->is_favourite;
      array_push($responseData, $searchDetails);
    }
    if (count($results)) {
      return Response()->json(['data' => $responseData]);
    } else {
      return response()->json(['status' => false, 'message' => 'No Data not found'], 404);
    }
  }
}
