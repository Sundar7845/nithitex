<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Cart;
use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Product;
use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Mail\OrderMail;
use Exception;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use PDF;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;

class OrderController extends Controller
{
    public function placeOrder(Request $request)
    {
        try {
            $cart_true = $request->cart_true;
            $shippingCharge = $request->shipping_charge;

            $buy_product_qty = $request->buy_now_product_qty;
            $buy_product_id = $request->buy_now_product_id;

            $buy_price = $request->buy_now_price;
            $buy_total = $request->buy_now_total;

            $cart_subtotal = $request->cart_subtotal;
            $cart_total = $request->cart_total;

            if ($cart_true == 1) {
                $total_amount = $cart_total;
                $sub_total = $cart_subtotal;
                $totQty = Cart::where('user_id', Auth::user()->id)->sum('qty');
            } else {
                $total_amount = $buy_total;
                $sub_total = $buy_price;
                $totQty = $buy_product_qty;
            }

            $order_id = Order::insertGetId([
                'user_id' => Auth::user()->id,
                'userrole_id' => Auth::user()->userrole_id,
                'door_no' => $request->door_no,
                'street_address' => $request->street_address,
                'city_name' => $request->city_name,
                'state_name' => $request->state_name,
                'name' => $request->name,
                'email' => $request->email,
                'phone' => $request->phone,
                'alternative_number' => $request->alternative_number,
                'pin_code' => $request->pin_code,
                'payment_type' => ($request->payment_type == 'COD' ? 'Cash On Delivery' : 'Razorpay'),
                'payment_status' => ($request->payment_type == 'COD' ? 'Unpaid' : 'paid'), 
                'r_order_id' => $request->r_order_id,
                'r_payment_id' => $request->r_payment_id,
                'currency' =>  'INR',
                'amount' => $total_amount,
                'sub_total' => $sub_total,
                'shipping_charge' => $shippingCharge,
                'order_number' => 'NTXOR' . mt_rand(10000000, 99999999),
                'order_date' => Carbon::now()->format('d F Y'),
                'order_month' => Carbon::now()->format('F'),
                'order_year' => Carbon::now()->format('Y'),
                'status' => 'pending',
                'created_at' => Carbon::now(),
                'tot_Qty' => $totQty,
                'collectcash_amount' => $request->collectcash_amount,
                'margin_amount' => $request->margin_amount,
            ]);

            if ($request->cart_true == 1) {
                $carts = Cart::where('user_id', Auth::user()->id)->get();
                foreach ($carts as $cart) {
                    OrderItem::insert([
                        'order_id' => $order_id,
                        'product_id' => $cart->product_id,
                        'qty' => $cart->qty,
                        'price' => $cart->total,
                        'created_at' => Carbon::now(),
                    ]);

                    $product = Product::where('id', $cart->product_id)->first();
                    $product->current_stock = $product->current_stock - $cart->qty;
                    $product->update();
                }
            } else {

                OrderItem::insert([
                    'order_id' => $order_id,
                    'product_id' => $buy_product_id,
                    'qty' => $buy_product_qty,
                    'price' => $buy_price,
                    'created_at' => Carbon::now(),
                ]);

                $product = Product::where('id', $buy_product_id)->first();
                $product->current_stock = $product->current_stock - $buy_product_qty;
                $product->update();
            }

            if (Auth::user()->userrole_id == 2) {
                $mobile = Auth::user()->phone;
                
                $order = Order::with('seller')->where('id',$order_id)->where('user_id',Auth::user()->id)->first();
                $orderItem = OrderItem::with('product')->where('order_id',$order_id)->orderBy('id','DESC')->get();
                
                $pdf = PDF::loadView('seller.dashboard.order_invoice',compact('order','orderItem'));
                Mail::to($request->email)->send(new OrderMail($pdf,$order->invoice_no,'online'));

                $content = $pdf->download()->getOriginalContent();

                Storage::disk('local')->put($order->invoice_no.'.pdf',$content);
                
                $save_url = 'invoice/'.$order->invoice_no.'.pdf';
                
                Order::where('id',$order->id)->update([
                    'invoice' => $save_url
                ]);
            } else {
                $mobile = $request->phone;
            }
            

            Http::post('http://pay4sms.in/sendsms/?token=9a2edf41bc2760c4c5bb0b592eaf7bfb&credit=2&sender=NITHTX&message=Your order is pending and will be Confirmed shortly. Check your status here: https://nithitex.com/track-your-order , Nithitex&number=' . $mobile . '');

            if ($request->cart_true == 1) {
                $rowId = Cart::where('user_id', Auth::user()->id)->get();
                Cart::destroy($rowId);
            }
            $message = "Order Placed Successfully";
            return response()->json(['status' => true, 'message' => $message], 200);
        } catch (Exception $e) {
            return $this->error($e->getMessage(), $e->getCode());
        }
    }
}
