<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Seller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Carbon\Carbon;
use App\Models\VerificationCode;
use Illuminate\Support\Facades\Http;


class LoginController extends Controller
{
    public function loginForm()
    {
        return view('auth.login');
    }

    public function login(Request $request)
    {
        $request->validate([
            'username'   => 'required',
            'password' => 'required'
        ]);

        $useremail = User::where('email',$request->username)->orwhere('phone',$request->username)->pluck('email')->first();
        $userphone = User::where('email',$request->username)->orwhere('phone',$request->username)->pluck('phone')->first();

        $code = User::where('email',$useremail)->pluck('verification_code')->first();
        if($useremail) {
            $verifyRole = $this->getRoleId($useremail);
            if($verifyRole) {

                if (Auth::attempt([
                    'email' => $useremail,
                    'password' => $request->password,
                    'phone' => $userphone
                ], $request->get('remember'))) {
                
                    if($verifyRole == 1) {
                        $verification = User::where('verification_code',$code)->where('email',$useremail)->pluck('verification_code')->first();
                        if(!$verification){
                            $notification = array(
                                'message' => 'Please Verify OTP',
                                'alert-type' => 'error'
                            );       
                            $verification = $this->SendOTP($request->phone);
                            return redirect()->route('otp.verification',['user_id' => $verification->user_id])->with($notification);
                        }else {
                            $notification = array(
                                'message' => 'Logged In Successfully',
                                'alert-type' => 'success'
                            );
                        }
                        return redirect()->route('user.dashboard')->with($notification);
                    }
                    else if ($verifyRole == 2) {
                        $notification = array(
                            'message' => 'Reseller Logged In Successfully',
                            'alert-type' => 'success'
                        );
                        return redirect()->route('seller.dashboard')->with($notification);
                    }               
                }
                else {
                    $notification = array(
                        'message' => 'Invalid Credentials',
                        'alert-type' => 'error'
                    );
                    return back()->with($notification);
                }
            }
            else {
                $notification = array(
                    'message' => 'Your Approval Is Pending',
                    'alert-type' => 'error'
                );
                return redirect()->route('user.login')->with($notification);
            }    
        }
        else {
            $notification = array(
                'message' => 'Invalid Credentials',
                'alert-type' => 'error'
            );
            return back()->with($notification);
        }
    }
    
    // public function login(Request $request)
    // {
    //     $request->validate([
    //         'email'   => 'required',
    //         'password' => 'required'
    //     ]);
    //     $code = User::where('email',$request->email)->pluck('verification_code')->first();
    //     $verifyRole = $this->getRoleId($request->email);
    //     if($verifyRole) {

    //         if (Auth::attempt([
    //             'email' => $request->email,
    //             'password' => $request->password,
    //             'phone' => $request->phone
    //         ], $request->get('remember'))) {
            
    //             if($verifyRole == 1) {
    //                 $verification = User::where('verification_code',$code)->where('email',$request->email)->pluck('verification_code')->first();
    //                 if(!$verification){
    //                     $notification = array(
    //                         'message' => 'Please Verify OTP',
    //                         'alert-type' => 'error'
    //                     );       
    //                     $verification = $this->SendOTP($request->phone);
    //                     return redirect()->route('otp.verification',['user_id' => $verification->user_id])->with($notification);
    //                 }else {
    //                     $notification = array(
    //                         'message' => 'Your Logged In Successfully',
    //                         'alert-type' => 'success'
    //                     );
    //                 }
    //                 return redirect()->route('user.dashboard')->with($notification);
    //             }
    //             else if ($verifyRole == 2) {
    //                 $notification = array(
    //                     'message' => 'Reseller Logged In Successfully',
    //                     'alert-type' => 'success'
    //                 );
    //                 return redirect()->route('seller.dashboard')->with($notification);
    //             }               
    //         }
    //         else {
    //             $notification = array(
    //                 'message' => 'Invalid Credentials',
    //                 'alert-type' => 'error'
    //             );
    //             return back()->with($notification);
    //         }
    //     }
    //     else {
    //         $notification = array(
    //             'message' => 'Your Approval Is Pending',
    //             'alert-type' => 'error'
    //         );
    //         return redirect()->route('user.login')->with($notification);
    //     }    
    // }

    private function getRoleId($email)
    {
        return User::where('email',$email)->pluck('userrole_id')->first();
    }

    public function regiterStore(Request $request)
    {
        $request->validate([
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'phone' => 'required|numeric|digits_between:10,15|unique:users',           
            'password' => 'required|string|min:8|confirmed'
            
        ]);
            user::create([
                'name' => $request->name,
                'email' => $request->email,
                'userrole_id' => 1,
                'phone' => $request->phone,
                'password' => Hash::make($request->password)
            ]);
            $notification = array(
                'message' => 'Please Verify OTP',
                'alert-type' => 'success'
            );
            $verificationCode = $this->SendOTP($request->phone);
            return redirect()->route('otp.verification',['user_id' => $verificationCode->user_id])->with($notification);
        
        }

    private function SendOTP($phone){
        $verificationCode = $this->generateOtp($phone);

        Http::post('http://pay4sms.in/sendsms/?token=9a2edf41bc2760c4c5bb0b592eaf7bfb&credit=2&sender=NITHTX&message=Your OTP for login to Nithitex is '.$verificationCode->otp.'. Valid for 5 minutes. Please do not share this OTP.&number='.$phone.'');
        
        return $verificationCode;
    }

    public function logout(Request $request)
    {
        Auth::logout();
        $request->session()->invalidate();
        $notification = array(
            'message' => 'User Logged Out Successfully',
            'alert-type' => 'success'
        );
        
        return redirect()->route('user.login')->with($notification);
    }

    // // Return View of OTP Login Page
    // public function logins()
    // {
    //     return view('auth.otp');
    // }

    // Generate OTP
    // public function generate(Request $request)
    // {
    //     // dd($request->all());
    //     # Validate Data
    //     // $request->validate([
    //     //     'phone' => 'required|exists:users,phone'
    //     // ]);

    //     # Generate An OTP
    //     $verificationCode = $this->generateOtp($request->mobile_no);

    //     $message = "OTP Sent To Your Mobile Number";

    //     Http::post('http://pay4sms.in/sendsms/?token=9a2edf41bc2760c4c5bb0b592eaf7bfb&credit=2&sender=NITHTX&message=Your OTP for login to Nithitex is '.$verificationCode->otp.'. Valid for 5 minutes. Please do not share this OTP.&number='.$request->mobile_no.'');
    //     # Return With OTP 

    //     return redirect()->route('otp.verification', ['user_id' => $verificationCode->user_id])->with('success',  $message); 
    // }

    public function generateOtp($phone)
    {
        $user = User::where('phone', $phone)->first();

        # User Does not Have Any Existing OTP
        $verificationCode = VerificationCode::where('user_id', $user->id)->latest()->first();

        $now = Carbon::now();

        if($verificationCode && $now->isBefore($verificationCode->expire_at)){
            return $verificationCode;
        }

        // Create a New OTP
        return VerificationCode::create([
            'user_id' => $user->id,
            'otp' => rand(123456, 999999),
            'expire_at' => Carbon::now()->addMinutes(5)
        ]);

    }

    public function verification($user_id)
    {
        return view('auth.otp-verify')->with([
            'user_id' => $user_id
        ]);
    }

    public function loginWithOtp(Request $request)
    {
        #Validation
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'otp' => 'required'
        ]);

        #Validation Logic
        $verificationCode   = VerificationCode::where('user_id', $request->user_id)->where('otp', $request->otp)->first();

        $now = Carbon::now();
        if (!$verificationCode) {
            return redirect()->back()->with('error', 'Your OTP is not correct');
        }elseif($verificationCode && $now->isAfter($verificationCode->expire_at)){
            return redirect()->back()->with('error', 'Your OTP has been expired');
        }

        $user = User::whereId($request->user_id)->first();

        if($user){
            // Expire The OTP
            $verificationCode->update([
                'expire_at' => Carbon::now()
            ]);

            $user->update([
                'verification_code' => $request->otp
            ]);

            Auth::login($user);
            $notification = array(
                'message' => 'User Registered Successfully',
                'alert-type' => 'success'
            );
            return redirect()->route('user.dashboard')->with($notification);
        }

        return redirect()->back()->with('error', 'You Have Entered Incorrect OTP!');
    }
}
