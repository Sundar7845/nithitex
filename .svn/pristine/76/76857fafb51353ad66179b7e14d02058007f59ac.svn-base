<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Category;
use App\Models\User;
use App\Models\VerificationCode;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use App\Traits\ResponseAPI;
use Carbon\Carbon;
use Exception;
use Illuminate\Support\Facades\Http;

class UserController extends Controller
{
    use ResponseAPI;

    public function register(Request $request)
    {
        $validator = validator::make($request->all(), [
            'name' => 'required|min:3',
            'email' => 'required|email|unique:users',
            'password' => 'required|min:8',
            'phone' => 'required|numeric|digits_between:10,15|unique:users'
        ]);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'message' => implode(",", $validator->errors()->all())], 400);
        }

        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'userrole_id' => 1,
            'password' => bcrypt($request->password),
            'phone' => $request->phone
        ]);

        return response()->json(['status' => true, 'message' => 'Registered Successfully'], 200);
    }

    public function login(Request $request)
    {
        $validator = validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required|min:8',
            'phone' => 'required'
        ]);
        if ($validator->fails()) {
            return response()->json(['status' => false, 'message' => implode(",", $validator->errors()->all())], 400);
        }

        $data = [
            'email' => $request->email,
            'password' => $request->password,
            'phone' => $request->phone,
        ];

        if (Auth::attempt($data)) {
            $token = Auth::user()->createToken('Auth Token')->accessToken;
            $user_id = Auth::user()->id;
            $user_name = Auth::user()->name;
            $userrole_id = Auth::user()->userrole_id;

            $responseData['status'] = true;
            $responseData['message'] = 'Logged in Successfully';
            $userCollection = array(
                "id" => $user_id,
                "name" => $user_name,
                "token" => $token,
                "userrole_id" => $userrole_id,
                "IsOTPVerified" => $this->CheckIsOTPVerified($request->email)
            );
            $responseData['data'] = $userCollection;
            return response()->json($responseData, 200);
        } else {
            return response()->json(['status' => false, 'message' => 'User does not exist please sign up'], 401);
        }
    }

    private function CheckIsOTPVerified($email)
    {
        $code = User::where('email', $email)->pluck('verification_code')->first();
        $verification = User::where('verification_code', $code)->where('email', $email)->pluck('verification_code')->first();
        if ($verification)
            return true;
        else
            return false;
    }

    public function logout()
    {
        if (Auth::check()) {
            auth()->user()->token()->revoke();
            return response()->json([
                'status' => true,
                'message' => 'Successfully logged out'
            ], 200);
        } else {
            return response()->json(['status' => false, 'message' => 'User does not exist please sign up'], 400);
        }
    }

    public function sendOTP(Request $request)
    {
        $verificationCode = $this->generateOtp($request->phone);
        try {
            Http::post('http://pay4sms.in/sendsms/?token=9a2edf41bc2760c4c5bb0b592eaf7bfb&credit=2&sender=NITHTX&message=Your OTP for login to Nithitex is ' . $verificationCode->otp . '. Valid for 5 minutes. Please do not share this OTP.&number=' . $request->phone . '');
        } catch (Exception $e) {
            return $this->error($e->getMessage(), $e->getCode());
        }

        return response()->json(['status' => true, 'message' => 'OTP Sent Successfully'], 200);
    }

    private function generateOtp($phone)
    {
        $user = User::where('phone', $phone)->first();
        # User Does not Have Any Existing OTP
        $verificationCode = VerificationCode::where('user_id', $user->id)->latest()->first();
        $now = Carbon::now();

        if ($verificationCode && $now->isBefore($verificationCode->expire_at)) {
            return $verificationCode;
        }
        // Create a New OTP
        return VerificationCode::create([
            'user_id' => $user->id,
            'otp' => rand(123456, 999999),
            'expire_at' => Carbon::now()->addMinutes(5)
        ]);
    }

    public function verifyOTP(Request $request)
    {
        #Validation
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'otp' => 'required'
        ]);

        #Validation Logic
        $verificationCode   = VerificationCode::where('user_id', $request->user_id)->where('otp', $request->otp)->first();

        $now = Carbon::now();
        if (!$verificationCode) {
            return response()->json(['status' => false, 'message' => 'Your OTP is not correct'], 400);
        } elseif ($verificationCode && $now->isAfter($verificationCode->expire_at)) {
            return response()->json(['status' => false, 'message' => 'Your OTP has been expired'], 400);
        }

        $user = User::whereId($request->user_id)->first();

        if ($user) {
            // Expire The OTP
            $verificationCode->update([
                'expire_at' => Carbon::now()
            ]);

            $user->update([
                'verification_code' => $request->otp
            ]);

            $message = "OTP Verified Successfully";
            return response()->json(['status' => true, 'message' => $message], 200);
        }

        return response()->json(['status' => false, 'message' => 'You Have Entered Incorrect OTP!'], 400);
    }
}
